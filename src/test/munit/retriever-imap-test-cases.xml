<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:email="http://www.mulesoft.org/schema/mule/email"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xmlns:java="http://www.mulesoft.org/schema/mule/java"
      xmlns:tls="http://www.mulesoft.org/schema/mule/tls"
      xmlns="http://www.mulesoft.org/schema/mule/core"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
      http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
      http://www.mulesoft.org/schema/mule/java http://www.mulesoft.org/schema/mule/java/current/mule-java.xsd
      http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd
      http://www.mulesoft.org/schema/mule/email http://www.mulesoft.org/schema/mule/email/current/mule-email.xsd">

    <munit:config name="retriever-imap-test-cases.xml">
        <munit:parameterizations>
            <munit:parameterization name="imap">
                <munit:parameters>
                    <munit:parameter propertyName="imap-config" value="imap-RetrieverTests"/>
                    <munit:parameter propertyName="startMethod" value="start(Integer)"/>
                    <munit:parameter propertyName="serverName" value="org.mule.email.mtf.TestIMAPServer"/>
                </munit:parameters>
            </munit:parameterization>
            <munit:parameterization name="imaps">
                <munit:parameters>
                    <munit:parameter propertyName="imap-config" value="imaps-RetrieverTests"/>
                    <munit:parameter propertyName="startMethod" value="startSecure(Integer)"/>
                    <munit:parameter propertyName="serverName" value="org.mule.email.mtf.TestIMAPServer"/>
                </munit:parameters>
            </munit:parameterization>
        </munit:parameterizations>
    </munit:config>

    <munit:dynamic-port propertyName="imap.port" min="1024" max="64000"/>

    <!-- Setup/Dispose -->
    <munit:before-suite name="setUpIMAPServer">
        <java:invoke-static class="${serverName}" method="${startMethod}">
            <java:args>
                #[{
                arg0: ${imap.port}
                }]
            </java:args>
        </java:invoke-static>
    </munit:before-suite>

    <munit:before-test name="populateIMAPServer">
        <java:invoke-static class="${serverName}" method="sendEmail()"/>
        <munit-tools:store key="messages">
            <munit-tools:value>#[[]]</munit-tools:value>
        </munit-tools:store>
    </munit:before-test>

    <munit:after-test name="cleanUpIMAPServer">
        <java:invoke-static class="${serverName}" method="setUserWithNormalPassword()"/>
        <java:invoke-static class="${serverName}" method="clean()"/>
    </munit:after-test>

    <munit:after-suite name="shutDownIMAPServer">
        <java:invoke-static class="${serverName}" method="stop()"/>
    </munit:after-suite>

    <!-- Configs -->
    <email:imap-config name="imap-RetrieverTests">
        <email:imap-connection host="127.0.0.1" port="${imap.port}" password="password"
                               user="juan.desimoni@mulesoft.com"/>
    </email:imap-config>

    <email:imap-config name="imap-RetrieverTests-DontRead" eagerlyFetchContent="false">
        <email:imap-connection host="127.0.0.1" port="${imap.port}" password="password"
                               user="juan.desimoni@mulesoft.com"/>
    </email:imap-config>

    <email:imap-config name="imaps-RetrieverTests">
        <email:imaps-connection host="127.0.0.1" port="${imap.port}" password="password"
                                user="juan.desimoni@mulesoft.com">
            <tls:context enabledProtocols="TLSv1.2,SSLv3">
                <tls:trust-store path="greenmail.jks" password="changeit"/>
            </tls:context>
        </email:imaps-connection>
    </email:imap-config>

    <email:imap-config name="imaps-RetrieverTests-DontRead" eagerlyFetchContent="false">
        <email:imaps-connection host="127.0.0.1" port="${imap.port}" password="password"
                                user="juan.desimoni@mulesoft.com">
            <tls:context enabledProtocols="TLSv1.2,SSLv3">
                <tls:trust-store path="greenmail.jks" password="changeit"/>
            </tls:context>
        </email:imaps-connection>
    </email:imap-config>

    <!-- Flows -->
    <flow name="list-DontRead-imap-RetrieverTests" maxConcurrency="1">
        <email:list-imap config-ref="imap-RetrieverTests-DontRead"/>
    </flow>

    <flow name="list-DontRead-imaps-RetrieverTests" maxConcurrency="1">
        <email:list-imap config-ref="imaps-RetrieverTests-DontRead"/>
    </flow>

    <!-- Tests -->
    <munit:test name="retrieveAndRead">
        <munit:validation>
            <email:list-imap config-ref="${imap-config}"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-that expression="#[payload.attributes.flags.seen]" is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="retrieveAndDontRead">
        <munit:validation>
            <flow-ref name="list-DontRead-${imap-config}"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-that expression="#[payload.attributes.flags.seen]" is="#[MunitTools::equalTo(false)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="retrieveOnlyNotRead">
        <munit:execution>
            <!-- Mark the only email as read -->
            <email:list-imap config-ref="${imap-config}"/>
            <!-- Send another email -->
            <java:invoke-static class="${serverName}" method="sendEmail()"/>
        </munit:execution>
        <munit:validation>
            <email:list-imap config-ref="${imap-config}">
                <email:imap-matcher seen="EXCLUDE"/>
            </email:list-imap>
            <munit-tools:assert-equals actual="#[sizeOf(payload)]" expected="#[1]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="retrieveOnlyRecent">
        <munit:execution>
            <!-- Make the only mail no longer recent -->
            <java:invoke-static class="${serverName}" method="setMailboxRecentFlag(boolean)">
                <java:args>
                    #[{
                    arg0: "false"
                    }]
                </java:args>
            </java:invoke-static>
            <!-- New mail is recent -->
            <java:invoke-static class="${serverName}" method="sendEmail()"/>
        </munit:execution>
        <munit:validation>
            <email:list-imap config-ref="${imap-config}">
                <email:imap-matcher recent="REQUIRE"/>
            </email:list-imap>
            <munit-tools:assert-equals actual="#[sizeOf(payload)]" expected="#[1]"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-equals actual="#[payload.attributes.flags.recent]"
                                       expected="#[true]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="retrieveAndExpungeDelete">
        <munit:execution>
            <!-- Set the email for deletion -->
            <email:list-imap config-ref="${imap-config}"/>
            <set-payload value="#[payload[0]]"/>
            <email:mark-as-deleted config-ref="${imap-config}" emailId="#[payload.attributes.id]"/>
            <!-- Add another email -->
            <java:invoke-static class="${serverName}" method="sendEmail()"/>
            <email:expunge-folder config-ref="${imap-config}"/>
        </munit:execution>
        <munit:validation>
            <email:list-imap config-ref="${imap-config}"/>
            <munit-tools:assert-equals actual="#[sizeOf(payload)]" expected="#[1]"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-equals actual="#[payload.attributes.flags.deleted]"
                                       expected="#[false]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="markAsReadAndRetrieve">
        <munit:execution>
            <email:list-imap config-ref="${imap-config}"/>
            <foreach>
                <email:mark-as-read config-ref="${imap-config}" emailId="#[attributes.id]"/>
            </foreach>
        </munit:execution>
        <munit:validation>
            <!-- Retrieve without reading -->
            <email:list-imap config-ref="${imap-config}"/>
            <set-payload value="#[payload[0]]"/>
            <!-- But should still be marked as read -->
            <munit-tools:assert-that expression="#[payload.attributes.flags.seen]" is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="markAsDeleteAndRetrieve">
        <munit:execution>
            <email:list-imap config-ref="${imap-config}"/>
            <foreach>
                <email:mark-as-deleted config-ref="${imap-config}" emailId="#[attributes.id]"/>
            </foreach>
        </munit:execution>
        <munit:validation>
            <email:list-imap config-ref="${imap-config}"/>
            <munit-tools:assert-that expression="#[sizeOf(payload)]" is="#[MunitTools::not(MunitTools::equalTo(0))]"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-that expression="#[payload.attributes.flags.deleted]"
                                     is="#[MunitTools::equalTo(true)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="failSettingFlag" expectedErrorType="EMAIL:EMAIL_NOT_FOUND">
        <munit:validation>
            <email:mark-as-deleted config-ref="${imap-config}" emailId="0"/>
        </munit:validation>
    </munit:test>

    <munit:test name="deleteAndRetrieve">
        <munit:execution>
            <!-- Get the ID from the existing email -->
            <email:list-imap config-ref="${imap-config}"/>
            <set-payload value="#[payload[0]]"/>
            <set-variable variableName="emailID" value="#[payload.attributes.id]"/>
            <!-- Send an extra email -->
            <java:invoke-static class="${serverName}" method="sendEmail()"/>
        </munit:execution>
        <munit:validation>
            <!-- Delete the original email -->
            <email:delete config-ref="${imap-config}" emailId="#[vars.emailID]"/>
            <email:list-imap config-ref="${imap-config}"/>
            <munit-tools:assert-equals actual="#[sizeOf(payload)]" expected="#[1]"/>
            <set-payload value="#[payload[0]]"/>
            <munit-tools:assert-that expression="#[payload.attributes.id]"
                                     is="#[MunitTools::not(MunitTools::equalTo('vars.emailID'))]"/>
            <munit-tools:assert-that expression="#[payload.attributes.flags.deleted]"
                                     is="#[MunitTools::equalTo(false)]"/>
        </munit:validation>
    </munit:test>

    <munit:test name="pollUndefinedFolder"
                expectedException="org.mule.extension.email.api.exception.EmailAccessingFolderException"
                expectedErrorType="EMAIL:ACCESSING_FOLDER">
        <munit:execution>
            <email:list-imap config-ref="${imap-config}" mailboxFolder="NO_FOUND_FOLDER"/>
        </munit:execution>
    </munit:test>
</mule>